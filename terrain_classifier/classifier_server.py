from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import numpy as np
import math as math
import argparse
from random import randint
import time
import tensorflow as tf
import os
import glob
import socket
from shared_functions import model
from shared_functions import round_predictions
from shared_functions import get_results

print('Done with imports')
program_start = time.time()

HOST = ''
PORT = 51717
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(1)

dummy_batch = np.array([
    [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4000, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4000, 0.4000, 0.4000, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4000, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 0.4078, 0.4078, 0.4078, 0.4078, 0.4078, 0.4039, 1.0000, 1.0000, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 1.0000, 1.0000, 1.0000, 0.4078, 1.0000, 1.0000, 0.4039, 0.4039, 0.4039, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 1.0000, 0.4078, 0.4078, 0.4078, 0.4078, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 0.4039, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.4039, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000]])

num_in_fc2 = 1024  # no second layer right now
num_in_fc1 = 1024  # 3024 seems just as good

with tf.name_scope('input'):
    x = tf.placeholder(tf.float32, [None, 884])
    # y_ = tf.placeholder(tf.float32, [None, 1])
    keep_prob = tf.placeholder(tf.float32)
with tf.name_scope('out'):
    y_conv = model(x, keep_prob, num_in_fc1, num_in_fc2)

with tf.device('/cpu:0'):
    restorer = tf.train.Saver(tf.all_variables())
    with tf.Session() as sess:

        print('initializing vars...')
        t0 = time.time()
        sess.run(tf.initialize_all_variables())
        t1 = time.time()
        print('initialize_all_variables took ----> ' + str(t1 - t0))
        print('making a dummy prediction to oil up the network...')
        t0 = time.time()
        predictions = y_conv.eval(feed_dict={x: dummy_batch, keep_prob: 1.0})
        t1 = time.time()
        print('initial prediction took ----> ' + str(t1 - t0))
        print(predictions)

        # init weights with saved ones
        t0 = time.time()
        restorer.restore(
            sess, 'saves/trained-20609_185578_35_1e-06_False_2conv1024-0.5_8207-8045-1207-1098_0.875788112303-batchNo--4095999')
        t1 = time.time()
        print('restorer took ----> ' + str(t1 - t0))

        end = time.time()
        runtime = end - program_start
        print('TOTAL SETUP TIME: ' + str(runtime))

        print("waiting on connection from client")
        conn, addr = s.accept()
        print('connected!')

        # each image uses up roughly 3500 chars, give or take a few
        maxCapacity = 500000  # 500,000/3500 ~= 140 image max

        while(True):

            print('waiting to receive an image')
            image_string = conn.recv(maxCapacity)
            # print('image_string = ' + image_string)
            print(len(image_string))

            if len(image_string) == maxCapacity:
                print('ERROR: tried to send too many images. Try increasing maxCapacity')
                break

            time0 = time.time()

            if len(image_string) == 0:
                # s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                # s.bind((HOST, PORT))
                s.listen(1)
                print("waiting on reconnection from client")
                conn, addr = s.accept()
                print('connected!')
                continue

            first_brace_seen = False
            image_batch = []
            num_images = 0
            i = 0
            while i < len(image_string):
                ch = image_string[i]
                # print(ch)
                if ch == '[':
                    if first_brace_seen:
                        print('Reading in an image')
                        num_images = num_images + 1
                        image_batch.append([])
                    else:
                        first_brace_seen = True
                elif ch == ',':
                    # would be a comma between arrays, not between numbers
                    # Do nothing
                    print('skipping over comma')
                elif ch == ']':
                    # two braces in a row would indicate end of array
                    # Do nothing
                    print('skipping over right brace')
                else:
                    # so it must be a number
                    num_str = ''
                    while ch != ',' and ch != ']':
                        num_str = num_str + ch
                        i = i + 1
                        ch = image_string[i]
                    num = int(num_str)
                    image_batch[num_images - 1].append(num / 255)
                    # print(num)
                i = i + 1

            # print('num pixels is *********************************> ' +
            #       str(len(image_batch[num_images - 1])))
            # print(image_batch)

            t0 = time.time()
            predictions = y_conv.eval(
                feed_dict={x: image_batch, keep_prob: 1.0})
            t1 = time.time()
            print('predictions took ----> ' +
                  str(1000 * (t1 - t0)) + ' milliseconds')
            print('raw pred = ' + str(predictions))

            pred_string = ''
            for prediction in predictions:
                pred_string = pred_string + str(prediction[0]) + ' '
            # so the format for 3 prediction would be like:
            #"0.349035 0.431241 0.341242 "

            conn.sendall(pred_string)
            # rounded_predictions = round_predictions(predictions)
            # print('rounded pred = ')
            # print(rounded_predictions)

            time1 = time.time()
            print('full loop iteration took ---> ' +
                  str(1000 * (time1 - time0)) + ' milliseconds')
